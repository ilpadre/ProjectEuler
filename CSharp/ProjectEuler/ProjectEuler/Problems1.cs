using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Cryptography.X509Certificates;
using System.Text;
using System.Threading.Tasks;

namespace ProjectEuler
{
    public class Problems1
    {
        public static int Problem1FindSumOfMultiplesOfThreeAndFiveBelow(int upperBound)
        {

            //  If we list all the natural numbers below 10 that are multiples of 3 or 5,
            //  we get 3, 5, 6 and 9.The sum of these multiples is 23.
            //  Find the sum of all the multiples of 3 or 5 below 1000.

            var sumOfMultiples = 0;
            for (int i = 0; i < upperBound; i++)
            {
                if (i % 3 == 0 || i % 5 == 0)
                    sumOfMultiples += i;
            }

            return sumOfMultiples;
        }

        public static uint Problem2FindSumOfEvenFibonacciNumbers(uint upperBound)
        {
            //  Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
            //  By starting with 1 and 2, the values of terms under 100, which are the first 10 terms,
            //  will be:
            //
            //            1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
            //
            //  The sum of the even valued terms is 44.
            //
            //  By considering the terms in the Fibonacci sequence whose values do not exceed four million, 
            //  find the sum of the even-valued terms.
            var numList = new List<uint>();
            uint x1 = 0;
            uint x2 = 1;
            uint totalSum = 0;
            do
            {
                uint temp = x2;
                x2 += x1;
                x1 = temp;
                if (x2%2 == 0)
                {
                    numList.Add(x2);

                }
            } while (x2 < upperBound);
            numList.ForEach(x => totalSum += x);
            return totalSum;
        }

        public static List<ulong> Problem3FindPrimveFactorsOfLargeNumber(ulong compositeNumber)
        {
            // The prime factors of 13195 are 5, 7, 13 and 29.
            // What is the largest prime factor of the number 600851475143 ?

            var primeFactors = new List<ulong>();

            var listOfPrimes = Helpers.FindPrimesUpTo(compositeNumber);

            primeFactors = listOfPrimes.Where(x => compositeNumber%x == 0).ToList();
            
            return primeFactors;
        }


    }
}
